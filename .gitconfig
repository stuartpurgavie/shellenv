# This is Git's per-user configuration file. 
[user]
# Please adapt and uncomment the following lines:
    name       = Stuart Purgavie
    email      = stuartpurgavie@uniqueservice.ca
    signingkey = AF96DC8739A1B8026E3D7587C66D6B44A2AE445A
    jira       = CLIP
    # This defines the name of the default branch. If you have a different per-repository name, you'll need to run that.
    # The outside cloning function will attempt to automatically detect this and set the configuration.
    main = main
    dev  = development
[winUpdater]
    recentlySeenVersion = 2.20.1.windows.1
[core]
    editor = codium --wait
    autocrlf = false
    excludesfile = ~/.gitignore
    # Can be heavy on CPU and only really useful on large repos with lots of files
    # disable if perf impact and enable per-repo instead for better performance
    fsmonitor = true
    untrackedCache = true
[gpg]
    program = gpg
[alias]
    ##### 'MAIN' Commands
    # Check Out Branch using team naming convention
    cob    = "!f() { ticketnum=$1; branchName=$2; git co -b \"$(git cf user.jira)-${ticketnum}/$(git cf --global user.email | grep -o '^[^@]*')/${branchName}\"; git or; }; f"
    cod    = "!f() { ticketnum=$1; branchName=$2; git co -b \"$(git cf user.jira)-${ticketnum}/$(git cf --global user.email | grep -o '^[^@]*')/${branchName}\"; git ord; }; f"
    # git finish: DELETES current branch and any backups, checks out updated main branch. Doesn't delete commits - can always checkout by hash in emergency :)
    finish = "!f() { git cork; b=$(git cb); if [ \"${b}\" = \"$(git cf user.main)\" ]; then echo 'Cannot execute on main branch'; return 1; fi; git krm; git fm; git br -D ${b}; git brrd ${b}; }; f"
    # git ss: Soft Squash using reset --soft to automatically squash everything between latest commit and main branch, then lets you amend the message if necessary
    ss     = !git kc && git cl  && git or  && git rs $(git merge-base $(git cf user.main) $(git cb)) && git cf commit.template "$(git tp)" && git cm && git cf commit.template ""
    ssd    = !git kc && git cld && git ord && git rs $(git merge-base $(git cf user.dev)  $(git cb)) && git cf commit.template "$(git tp)" && git cm && git cf commit.template ""
    # git tw: Tweak a previously pushed PR on same branch (will prompt you for a new commit message)
    tw     = !git cm -m "Tweaked! (Change Me)" && git ss && git pof
    
    ##### Remotes and Pull Requests
    # git fm: Fetch main branch and check it out
    fm   = !git fa && git co $(git cf user.main) && git merge origin/$(git cf user.main) --ff-only
    fd   = !git fa && git co $(git cf user.dev)  && git merge origin/$(git cf user.dev)  --ff-only
    # git po: Push Origin (pof: with force flag '+' in case you've rewritten history locally through squash or reset)
    po   = !git push origin  $(git cb)
    pof  = !git push origin +$(git cb)
    # git pr: DRAFT Pull Request on origin using hub binary to execute (use prf if you've previously closed a PR on this branch)
    pr   = !git ccc 1 && git kc && git or && git po  && git gh && gh pr create --base \"$(git cf user.main)\" --title \"$(git log -1 --pretty=%B)\" --head \"$(git cb)\" --body \"\" --draft
    prf  = !git ccc 1 && git kc && git or && git pof && git gh && gh pr create --base \"$(git cf user.main)\" --title \"$(git log -1 --pretty=%B)\" --head \"$(git cb)\" --body \"\" --draft
    # git or: Origin Rebase using local main branch instead of detached origin/main branch
    or   = !git fa && declare br=$(git cb) && git co $(git cf user.main) && git merge origin/$(git cf user.main) --ff-only && git co ${br} && git rebase $(git cf user.main)
    ord  = !git fa && declare br=$(git cb) && git co $(git cf user.dev)  && git merge origin/$(git cf user.dev)  --ff-only && git co ${br} && git rebase $(git cf user.dev)
    # git up: Working with Submodules consistently
    up   = !git pull --rebase --prune $@ && git submodule update --init --recursive
    # git cor: Check Out Remote branch
    cor  = "!f() { branchName=$1; git dhaf; git fa && git co remotes/origin/${branchName} && git co -b ${branchName} && git br --set-upstream-to origin/${branchName}; git dhan; }; f"

    ##### Shorthand Commands
    br   = branch
    bra  = branch --all
    brrd = push origin --delete             # Branch Remote Delete
    ca   = commit --amend
    cb   = rev-parse --abbrev-ref HEAD      # Current Branch
    cf   = config
    ci   = commit
    cia  = commit --all --gpg-sign --message
    cif  = "!f() { terraform fmt -recursive $(git dir); git ci \"$@\"; }; f"
    cm   = !git add -A && git commit        # Depending on your pattern, better than 'git commit -a'
    co   = checkout
    dir  = rev-parse --show-toplevel        # Show absolute path to git directory on filesystem
    dump = cat-file -p
    fa   = fetch --all --prune
    gdir = rev-parse --git-dir
    hash = log -n 1 --pretty=format:"%H%n"  # Show full hash of current HEAD commit
    head = reset HEAD --hard
    ori  = remote get-url origin
    rbs  = rebase --exec 'git commit --amend --no-edit -n -S' -i # Rebase with no edits for purposes of gpg signing
    rs   = reset --soft
    rh   = reset --hard
    sa   = stash apply
    sh   = stash
    show = !git diff origin $(git cf user.main)
    st   = status
    tld  = !cd $(git dir)                   # Copy of 'git cd' but with the "top level directory" abbrev.
    ttag = describe --abbrev=0
    type = cat-file -t

    ##### Branch Backup Commands
    #    git rek: REcover latest bacKup branch
    rek  = !git co $(git for-each-ref \"refs/heads/$(git krb)=b=*\" --sort='-refname' --format='%(refname:lstrip=2)' --count=1)
    #    git cork: Check Out Root of bacKup branch (when in a backup branch)
    cork = !git co $(git krb)
    #    git kc: bacKup Create branch using naming convention '=b=##'
    kc   = "!f() { for i in {01..99}; do d=\"$(printf '%02d' ${i})\"; declare n=\"$(git krb)=b=${d}\"; if [ $(git bx ${n}) -gt 0 ]; then break; fi; done; git br ${n}; echo \"Backup ${d} created: '${n}'\"; }; f"
    #    git kg: bacKup Get branches with same core name
    kg   = !git br --list \"$(git krb)=b=*\" --format='%(refname:lstrip=2)'
    #    git krb: bacKup Root Branch name to stdout
    krb  = !git cb | grep -o -e '[^=]*'
    #    git krm: bacKup ReMove all backup branch refs with core name same as current
    krm  = "!f() { git cork; for b in $(git kg); do git br -D ${b}; done; }; f"
    #    git ks: bacKup Swap - when on backup branch, swap current branch with detected root
    ks   = "!f() { git kv && { hn=$(git hash); bo=$(git cb); git cork; ho=$(git hash); bn=$(git cb); git co $(git cf user.main); git update-ref refs/heads/${bn} ${hn}; git update-ref refs/heads/${bo} ${ho}; git co ${bn}; } || echo 'Run from backup branch only'; }; f"
    ksd  = "!f() { git kv && { hn=$(git hash); bo=$(git cb); git cork; ho=$(git hash); bn=$(git cb); git co $(git cf user.dev); git update-ref refs/heads/${bn} ${hn}; git update-ref refs/heads/${bo} ${ho}; git co ${bn}; } || echo 'Run from backup branch only'; }; f"
    #    git kv: bacKup Validate - validates that current branch is a backup branch
    kv   = "!f() { case \"$(git cb)\" in *'=b='*) return 0 ;; *) return 1 ;; esac ;}; f"
    
    ##### Tools and Intermediates
    # git cc: Commit Count (weird edge case where doesn't detect a commit subject if it starts with a '*'?)
    cc   = "!f() { git shortlog $(git cf user.main)..HEAD | grep -E '^[ ]+\\w+' | wc -l ;}; f"
    ccd  = "!f() { git shortlog $(git cf user.dev)..HEAD | grep -E '^[ ]+\\w+' | wc -l ;}; f"
    # git ccc 1: Commit Count Check, accepts an interger as an argument
    ccc  = "!f() { declare -i c=${1}; declare -i i=$(git cc); [ ${i} -eq ${c} ] && return 0 || { printf \"Commit Count since main branch restricted\ncounted: ${i}\nwanted: ${c}\\nuse 'git ss' first\" && return 1 ;} ;}; f"
    # Commit message Log since main branch (also saves in temporary template file)
    cl   = !git --no-pager log --reverse --format="%x2D%x20%s%n%b" $(git cf user.main)..$(git cb) | tee "$(git tp)"
    cld  = !git --no-pager log --reverse --format="%x2D%x20%s%n%b" $(git cf user.dev)..$(git cb) | tee "$(git tp)"
    # git tp: TemPlate file location, anything inside the .git directory is ignored from commits so is 'safe' location, used for default commit message
    tp   = !echo "$(git dir)/$(git gdir)/template"
    # git zip / tar : create archive of repo
    zip  = !git archive --format=zip    --output=$(basename -s.git $(git ori))-$(git ttag).zip    $(git ttag)
    tar  = !git archive --format=tar.gz --output=$(basename -s.git $(git ori))-$(git ttag).tar.gz $(git ttag)
    # git dha: detached HEAD advice on/off
    dhan = !git config advice.detachedHead true
    dhaf = !git config advice.detachedHead false
    # If you've committed files that shouldn't be committed according to .gitignore
    apply-gitignore = !git ls-files -ci --exclude-standard -z | xargs -0 git rm --cached
    # Set per-repository core settings for file list caching which improves diff speeds in large repos, overkill in small repos
    # Paired with the core.fsmonitor and core.untrackedCache global settings above
    lrgr = !git cf core.fsmonitor true  && git cf core.untrackedCache true
    smlr = !git cf core.fsmonitor false && git cf core.untrackedCache false
    nulr = !git cf unset core.fsmonitor && git cf unset core.untrackedCache
    
    ##### Tests
    # git bx: Branch Exists test
    bx   = "!f() { branchName=$1; git show-ref --verify --quiet refs/heads/${branchName} ; e=${?}; echo ${e}; return ${e}; }; f"
    # git hub: Check 'hub' binary installed
    hub  = "!f() { command -v hub >/dev/null 2>&1 || { echo 'hub binary not installed'; return 1; }; }; f"
    gh   = "!f() { command -v gh  >/dev/null 2>&1 || { echo 'gh  binary not installed'; return 1; }; }; f"

    ##### Status Tools
    hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
    ls   = log --pretty=format:"%C(yellow)%H%Cred%d\\ %Creset%s%C(cyan)\\ [%cn\\ %ae\\ %G?]" --decorate
    lsm  = log --pretty=format:"%C(yellow)%H%Cred%d\\ %Creset%s%C(cyan)\\ [%cn]" --decorate $(git cf user.main)..HEAD
    lsd  = log --pretty=format:"%C(yellow)%H%Cred%d\\ %Creset%s%C(cyan)\\ [%cn]" --decorate $(git cf user.dev)..HEAD

    ##### Convco-based Commands
    # ver: create new tag based on conventional commits since last tag
    ver  = "!f() { git tag -a \"$(convco version --bump --print-prefix)\" -m \"$(git log -1 --pretty=%B)\"; }; f"
    # pot: push to origin the latest tag in the repository
    pot  = "!f() { git push origin \"$(convco version --print-prefix)\"; }; f"

[commit]
    gpgsign = true
    verbose = true
[tag]
    gpgsign = true
    sort = version:refname
[merge]
    conflictstyle = zdiff3
[color]
    ui = auto
[hub]
    protocol = ssh
[credential "helperselector"]
    selected = <no helper>
[credential]
    helper = 
[url "ssh://git@github.com/"]
    insteadOf = https://github.com/
[url "ssh://git@gitlab.com/"]
    insteadOf = https://gitlab.com/
[init]
    defaultBranch = main
[pager]
    diff = delta
    log = delta
    reflog = delta
    show = delta
    blame = delta

[interactive]
    diffFilter = delta --color-only

[delta]
    features = side-by-side line-numbers decorations
    whitespace-error-style = 22 reverse

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none

[column]
    ui = auto
[branch]
    sort = -committerdate
[diff]
    algorithm = histogram
    colorMoved = plain
    mnemonicPrefix = true
    renames = true
[push]
    autoSetupRemote = true
    # This setting will make it so all local tags are always pushed whenever ANYTHING else is pushed - good setting but need to be aware it's happening
    # followTags = true
[fetch]
    prune = true
    pruneTags = true
    all = true
[help]
    autocorrect = prompt
[rerere]
    enabled = true
    autoupdate = true
[rebase]
    autoSquash = true
    autoStash = true
    updateRefs = true
[pull]
    # Only turn this on if you're an overzealous rebaser and dislike the default pull behaviour
    rebase = true
