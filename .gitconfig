# This is Git's per-user configuration file. 
[user]
# Please adapt and uncomment the following lines:
    name = Stuart Purgavie
    email = stuart.purgavie@digitalonus.com
    signingkey = 1E76FA963447884AE6E034CCB9B6C8BDCA870F5B
    jira = CLIP
    # This defines the name of the default branch. If you have a different per-repository name, you'll need to run that.
    # The outside cloning function will attempt to automatically detect this and set the configuration.
    main = main
    dev  = development
[winUpdater]
    recentlySeenVersion = 2.20.1.windows.1
[core]
    editor = code --wait
    autocrlf = false
[gpg]
    program = gpg
[alias]
    ##### 'MAIN' Commands
    # Check Out Branch using team naming convention
    cob    = "!f() { ticketnum=$1; branchName=$2; git co -b \"$(git cf user.jira)-${ticketnum}/$(git cf --global user.email | grep -o '^[^@]*')/${branchName}\"; git or; }; f"
    cod    = "!f() { ticketnum=$1; branchName=$2; git co -b \"$(git cf user.jira)-${ticketnum}/$(git cf --global user.email | grep -o '^[^@]*')/${branchName}\"; git ord; }; f"
    # git finish: DELETES current branch and any backups, checks out updated main branch. Doesn't delete commits - can always checkout by hash in emergency :)
    finish = "!f() { git cork; b=$(git cb); if [ \"${b}\" = \"$(git cf user.main)\" ]; then echo 'Cannot execute on main branch'; return 1; fi; git krm; git fm; git br -D ${b}; git brrd ${b}; }; f"
    # git ss: Soft Squash using reset --soft to automatically squash everything between latest commit and main branch, then lets you amend the message if necessary
    ss     = !git kc && git cl && git or && git reset --soft $(git merge-base $(git cf user.main) $(git cb)) && git cm -F "$(git tp)" && git ca
    ssd    = !git kc && git cld && git ord && git reset --soft $(git merge-base $(git cf user.dev) $(git cb)) && git cm -F "$(git tp)" && git ca
    # git tw: Tweak a previously pushed PR on same branch (will prompt you for a new commit message)
    tw     = !git cm -m "Tweaked! (Change Me)" && git ss && git pof
    
    ##### Remotes and Pull Requests
    # git fm: Fetch main branch and check it out
    fm   = !git fetch --all --prune && git co $(git cf user.main) && git merge origin/$(git cf user.main) --ff-only
    fd   = !git fetch --all --prune && git co $(git cf user.dev) && git merge origin/$(git cf user.dev) --ff-only
    # git po: Push Origin (pof: with force flag '+' in case you've rewritten history locally through squash or reset)
    po   = !git push origin  $(git cb)
    pof  = !git push origin +$(git cb)
    # git pr: DRAFT Pull Request on origin using hub binary to execute (use prf if you've previously closed a PR on this branch)
    pr   = !git ccc 1 && git kc && git or && git po  && git hub && hub pull-request -d
    prf  = !git ccc 1 && git kc && git or && git pof && git hub && hub pull-request -d
    # git or: Origin Rebase using local main branch instead of detached origin/main branch
    or   = !git fetch --all --prune && declare br=$(git cb) && git co $(git cf user.main) && git merge origin/$(git cf user.main) --ff-only && git co ${br} && git rebase $(git cf user.main)
    ord  = !git fetch --all --prune && declare br=$(git cb) && git co $(git cf user.dev) && git merge origin/$(git cf user.dev) --ff-only && git co ${br} && git rebase $(git cf user.dev)
    # git up: Working with Submodules consistently
    up   = !git pull --rebase --prune $@ && git submodule update --init --recursive

    ##### Shorthand Commands
    br   = branch
    brrd = push origin --delete             # Branch Remote Delete
    ca   = commit --amend
    cb   = rev-parse --abbrev-ref HEAD      # Current Branch
    cd   = "!f() { tld=$(git dir); echo \"Changing directory to ${tld}\"; cd ${tld}; }; f"      # Change Directory to git root
    cf   = config
    ci   = commit
    cif  = "!f() { terraform fmt -recursive $(git dir); git ci \"$@\" }; f"
    cm   = !git add -A && git commit        # Depending on your pattern, better than 'git commit -a'
    co   = checkout
    dir  = rev-parse --show-toplevel        # Show absolute path to git directory on filesystem
    dump = cat-file -p
    gdir = rev-parse --git-dir
    hash = log -n 1 --pretty=format:"%H%n"  # Show full hash of current HEAD commit
    head = reset HEAD --hard
    show = !git diff origin $(git cf user.main)
    st   = status
    tld  = !cd $(git dir)                   # Copy of 'git cd' but with the "top level directory" abbrev.
    type = cat-file -t

    ##### Branch Backup Commands
    #    git rek: REcover latest bacKup branch
    rek  = !git co $(git for-each-ref \"refs/heads/$(git krb)=b=*\" --sort='-refname' --format='%(refname:lstrip=2)' --count=1)
    #    git cork: Check Out Root of bacKup branch (when in a backup branch)
    cork = !git co $(git krb)
    #    git kc: bacKup Create branch using naming convention '=b=##'
    kc   = "!f() { for i in {01..99}; do d=\"$(printf '%02d' ${i})\"; declare n=\"$(git krb)=b=${d}\"; if [ $(git bx ${n}) -gt 0 ]; then break; fi; done; git br ${n}; echo \"Backup ${d} created: '${n}'\"; }; f"
    #    git kg: bacKup Get branches with same core name
    kg   = !git br --list \"$(git krb)=b=*\" --format='%(refname:lstrip=2)'
    #    git krb: bacKup Root Branch name to stdout
    krb  = !git cb | grep -o -e '[^=]*'
    #    git krm: bacKup ReMove all backup branch refs with core name same as current
    krm  = "!f() { git cork; for b in $(git kg); do git br -D ${b}; done; }; f"
    #    git ks: bacKup Swap - when on backup branch, swap current branch with detected root
    ks   = "!f() { git kv && { hn=$(git hash); bo=$(git cb); git cork; ho=$(git hash); bn=$(git cb); git co $(git cf user.main); git update-ref refs/heads/${bn} ${hn}; git update-ref refs/heads/${bo} ${ho}; git co ${bn}; } || echo 'Run from backup branch only'; }; f"
    ksd  = "!f() { git kv && { hn=$(git hash); bo=$(git cb); git cork; ho=$(git hash); bn=$(git cb); git co $(git cf user.dev); git update-ref refs/heads/${bn} ${hn}; git update-ref refs/heads/${bo} ${ho}; git co ${bn}; } || echo 'Run from backup branch only'; }; f"
    #    git kv: bacKup Validate - validates that current branch is a backup branch
    kv   = "!f() { case \"$(git cb)\" in *'=b='*) return 0 ;; *) return 1 ;; esac ;}; f"
    
    ##### Tools and Intermediates
    # git cc: Commit Count (weird edge case where doesn't detect a commit subject if it starts with a '*'?)
    cc   = "!f() { git shortlog $(git cf user.main)..HEAD | grep -E '^[ ]+\\w+' | wc -l ;}; f"
    ccd  = "!f() { git shortlog $(git cf user.dev)..HEAD | grep -E '^[ ]+\\w+' | wc -l ;}; f"
    # git ccc 1: Commit Count Check, accepts an interger as an argument
    ccc  = "!f() { declare -i c=${1}; declare -i i=$(git cc); [ ${i} -eq ${c} ] && return 0 || { printf \"Commit Count since main branch restricted\ncounted: ${i}\nwanted: ${c}\\nuse 'git ss' first\" && return 1 ;} ;}; f"
    # Commit message Log since main branch (also saves in temporary template file)
    cl   = !git --no-pager log --reverse --format="%x2D%x20%s%n%b" $(git cf user.main)..$(git cb) | tee "$(git tp)"
    cld  = !git --no-pager log --reverse --format="%x2D%x20%s%n%b" $(git cf user.dev)..$(git cb) | tee "$(git tp)"
    # git tp: TemPlate file location, anything inside the .git directory is ignored from commits so is 'safe' location, used for default commit message
    tp   = !echo "$(git dir)/$(git gdir)/template"
    
    ##### Tests
    # git bx: Branch Exists test
    bx   = "!f() { branchName=$1; git show-ref --verify --quiet refs/heads/${branchName} ; e=${?}; echo ${e}; return ${e}; }; f"
    # git hub: Check 'hub' binary installed
    hub  = "!f() { command -v hub >/dev/null 2>&1 || { echo 'hub binary not installed'; return 1; }; }; f"

    ##### Status Tools
    hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
    ls   = log --pretty=format:"%C(yellow)%H%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    lsm  = log --pretty=format:"%C(yellow)%H%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate $(git cf user.main)..HEAD
    lsd  = log --pretty=format:"%C(yellow)%H%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate $(git cf user.dev)..HEAD

[commit]
    gpgsign = true
[color]
    ui = auto
[hub]
    protocol = ssh
[credential "helperselector"]
    selected = <no helper>
[credential]
    helper = 
[url "ssh://git@github.com/"]
    insteadOf = https://github.com/
[url "ssh://git@gitlab.com/"]
    insteadOf = https://gitlab.com/
[init]
    defaultBranch = main
[pager]
    branch = false
